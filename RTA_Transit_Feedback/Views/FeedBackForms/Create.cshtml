@model RTA_Transit_Feedback.FeedBackForm

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>FeedBackForm</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.FeedbackDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FeedbackDescription, new { htmlAttributes = new { @class = "form-control", placeholder = "Provide your comments here.", cols = 35, @rows = 5 } })

            @Html.ValidationMessageFor(model => model.FeedbackDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.DateofRide, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateofRide, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateofRide, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.DateofRide, htmlAttributes: new { @class = "control-label col-md-2" })
        @Html.ValidationMessageFor(model => model.DateofRide, "", new { @class = "text-danger" })
        <div class="col-md-10">
            <input type="date" name="DateofRide">

            @*@Html.EditorFor(model => model.DateofRide, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateofRide, "", new { @class = "text-danger" })*@



        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TimeofRide, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="time" name="TimeofRide">
        </div>
    </div>

    @*<div class="form-group">
        @Html.LabelFor(model => model.TimeofRide, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TimeofRide, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TimeofRide, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.RouteName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RouteName, new { htmlAttributes = new { @class = "form-control", placeholder = "Route 3, Red Line, HealthLine" } })
            @Html.ValidationMessageFor(model => model.RouteName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.VehNum, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.VehNum, new { htmlAttributes = new { @class = "form-control", placeholder = "e.g. 1026" } })
            @Html.ValidationMessageFor(model => model.VehNum, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.CustomerID, "CustomerID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
            </div>
        </div>*@

    @*<div class="form-group">
            @Html.LabelFor(model => model.BatchID, "BatchID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BatchID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BatchID, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>


        <button id="btnShowModal" type="button"
                class="btn btn-sm btn-default pull-left col-lg-11 button button4">
            Continue
        </button>

        <div class="modal fade" tabindex="-1" id="loginModal"
             data-keyboard="false" data-backdrop="static">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">
                            ×
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <h2>Ready to submit?</h2>
                            <p>Your feedback can't be changed after being submitted. Press Submit to continue, or Cancel to go back.</p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary button button4">Submit</button>
                        <button type="button" id="btnHideModal" class="btn btn-primary button button4">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js">

</script>


<script type="text/javascript">

    $(document).ready(function () {
        $("#btnShowModal").click(function () {
            $("#loginModal").modal('show');
        });

        $("#btnHideModal").click(function () {
            $("#loginModal").modal('hide');
        });
    });
</script>

<script>
    var nowTemp = new Date();
    var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

    console.log("logged");


    var checkin = $('#dpd1').datepicker({
        onRender: function (date) {
            return date.valueOf() < now.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (ev) {
        if (ev.date.valueOf() > checkout.date.valueOf()) {
            var newDate = new Date(ev.date)
            newDate.setDate(newDate.getDate() + 1);
            checkout.setValue(newDate);
        }
        checkin.hide();
        $('#dpd2')[0].focus();
    }).data('datepicker');
    var checkout = $('#dpd2').datepicker({
        onRender: function (date) {
            return date.valueOf() <= checkin.date.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (ev) {
        checkout.hide();
    }).data('datepicker');
</script>